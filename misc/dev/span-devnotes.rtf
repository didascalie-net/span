{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww8400\viewh16300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 span notes\
\
--------------------------------------------------\
23 april 2012\
\
\
how to get app path, patch path and span path\
	when in max\
	when in standalone\
\
\
how to get span folder\
\
	max\
		get span.core path with loadproperties.js from within span.core\
			remove /lib/span.core.maxpat\
\
	standalone\
		get app name with loadproperties.js on top level patch\
		get app path with "max sendapppath"\
		build span folder path with \
			apppath/appname.app/Contents/support/span\
\
\
---\
what to do at load:\
\
- get system info and location of span folder\
	clear span dict\
	copy system info to span dict\
	get list of files in span folder\
		copy to span dict as "spanfiles"\
- load span_info and print to max window\
	copy to span dict\
	\
\
\
\
\
\
---\
\
settings, preferences, etc...\
\
What's in the preferences\
What's in the settings\
What's in a project\
\
\
\
preferences:\
there should be user preferences stored in span folder or in project folder\
there should be a default preferences in the span folder that is used to generate a new user preferences\
\
	content\
		verbose\
		recentprojects (number of recent projects)\
		projects\
			current (only last created or loaded project)\
			recent (all recent projects = recentprojects)\
		shortcuts\
		scheduler\
		interface\
			colors\
				nodes\
					audio\
					device\
					video\
					control\
				themes\
					lightgreen\
					generic\
					purple\
					blue\
					red\
\
\
make span_defaultproject.json\
\
\
When you save a project, you could check which "keys" to save with the preferences key of it (i.e. shortcuts, scheduler).\
\
\
\
projects:\
\
	content\
		projectinfo\
			name\
			creation\
				date\
				appversion\
		config\
		paths\
		files\
		windows\
\
	maybe:	\
		scheduler\
		shortcuts\
\
\
---\
questions, thoughts\
\
should modules path be in preferences or project?\
\
need to load modules jsons into files key of modules dict.\
\
\
\
--------------------------------------------------\
24 april 2012\
\
-done- try namespace with /modulename/instance/param instead of /modulename.instance/param\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1160\fi-1160\pardirnatural
\cf0 	this is really the way it should be. This makes the namespace much easier to look at because all of the instances of a module can be collapsed under the module name. Also, all of the common keys of a module can be written only once at the level of the module. We can also write the "quantity" key a the module level. In this way we can easily know how many instances there are by questioning the namspace.\
\
	i.e:\
	del\
		quantity: 2\
		active: 1\
		address: del\
		tags: audio\
		inputs: 1\
		outputs: 1\
		filename: t_del\
		description: "standard delay"\
		1\
			sw\
				address: sw\
				description: "on/off switch"\
				...\
				value: 0\
			...\
		2\
				address: sw\
				description: "on/off switch"\
				...\
				value: 0\
			...\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 		...\
\
\
-done- modify span-requests to send "null" whenever there is no response, then route to bang out right outlet if "null".\
\
-done- when adding modules to database, it not only adds modules to path key, but adds a relative path to each json in the modules key...\
\
	this way you can know exactly where the files are for a particular module, if you need to\
\
\
Try saving a project:\
	decide wht keys to save with it.\
\
What's the difference between preferences and a project?\
\
make new span_preferences file be written automatically if there is no existing, by opening and resaving span_defaultpreferences\
\
\
---\
working on projects\
\
What's in span\
\
	system\
	info\
	preferences\
		verbose\
		recentprojects\
		projects\
			current\
			recent\
		shortcuts\
		scheduler\
		interface\
	paths\
	modules\
	config\
	namespace\
\
what should be in projects:\
\
projects:\
\
project (key in span dict)\
	info\
		name\
		creation\
			date\
			appversion\
	preferences\
		scheduler\
			override 0\
		shortcuts\
			override 0\
	config\
		module\
			quantity\
			attribute overrides\
	paths\
		modules\
			tag: modules\
		soundfiles\
			tag: audio, soundfiles\
		samples\
			tag: audio, samples\
	files\
		name\
		\
	windows\
\
\
\
\
certain prefs can be in project, called projectprefs, and they are either copied into span prefs or ignored.\
	flag: active\
\
\
\
---\
There could be a templates folder, a modules folder and a defaultproject folder in the span folder. These would be saved in the new "system" key of span dict. If one wanted to, they could define other templates, modules or defaultproject folders in the "paths" section. When needed, span would first look to see if there is a path (project), and if not, would go to the system path for the default.\
\
\
--------------------------------------------------\
25 april 2012\
\
\
\
a 
\b modules
\b0  folder should be in the span folder, but it should NOT be included in system files. \
by default, this will be the modules folder defined in span/paths\
the same could be true of the defaultproject that should be in the span folder.\
it will also be pointed to in span/paths\
Also, a temp folder that could contain anything from a temp project to module temp stores...\
\
should the defaultproject be a folder or just a file? Maybe it should be a file, and then it looks within the same folder to find the other folders like media and data\
\
I think that the project should be loaded as a project dictionary (key) within the span dict. \
Certain keys that could override span preferences would have subkey: override (1/0).\
\
\
There could be a "properties" (find good name) dict, probably in span_preferences, that defines things like path types, file types, etc with tags or whatever. This could also be in the project::preferences. This way, project::paths could contain subkeys for each type, and then just list the different paths, without having to clutter things with tags and other keys.\
\
There should be a way to establish what system folders are needed, so that if somebody doesn't want to use "temp" they don't have to, or if somebody wants to make some other needed span folder that we didn't plan on, they can.\
\
\
\
\'96 make system folder definitions \
	this should be done in span_info.json\
	maybe span_info.json should be called "setup"\
		or span-config (example wordpress)\
		or span-load (example wordpress)\
\
\
\
------------------------------------------------------------------------------------------\
conversation avec Renaud\
25 april 2012\
\
\
	span-load\
\
	span-settings\
\
module n'est pas unconcept span\
\
\
---\
\
keyboard map shortcuts\
	c'eat quoi\
\
shortcuts c'est keyboard mapper\
\
settings - c'est par rapport \'e0 l'appli\
	tapemovie\
\
\
\
dossier projets?\
\
\
4 niveaux\
	span-load\
		sous dict "info" span\
		key "settings" avec \
			path\
			or settings par default\
\
	name-settings\
		pour d\'e9finir une appli, environnement, etc\
			tapemovie\
				info	\
				structure des dossiers\
				comment faire un namespace\
	\
	middle: pr\'e9f\'e9rence uitlisateur\
	project:\
\
\
\
namespace\
\
\
\
config comme attribut du module\
\
pas de key config\
\
\
\
---\
tag node\
\
dossier "nodes"\
\
\
span-load\
	info - dict\
	settingsfile - "" (vide or un path) - ce file merge avec defaultsettings\
	preferencesfile - \
	defaultsettings - dict\
\
\
\
dans default settings	\
	\
\
\
quand on charge settings on merge avec le settings par d\'e9faut.\
\
\
fichier span-preferences.json\
\
\
**************************************************\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 span-load\
	info\
	settings\
		file\
		default\
	preferences\
		file\
		default\
	project\
		file\
		default\
\
	init2 ?\
	events ?\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
\
\
\
dans settings il y a paths\
\
\
\
settings:\
	paths\
\
\
paths relatif ou absolus\
\
\
--\
templates\
\
\
\
--nodelists\
	choix de quoi sauver avec le projet\
	\
\
namespace:\
\
key dans span\
\
modules\
key dans span qui s'appelle nodes\
\
\
dans project\
	key "nodes" replace config\
\
\
namespace et ALIAS\
\
nodes discovery ....\
\
\
--------\
project file should place in project/info key the "path" where it was loaded. This way, the paths defined in it could be defined relative to it  (?)\
\
\
--------------------------------------------------\
26 april 2012\
\
\
Salut...  J'ai propos\'e9 une solution pour la confusion des span.load - redirect. (issue 14). Je l'ai mis en place. Je pense que c'est le bon compromis. Maintenant, je voudrais modifier la structure des keys dans span.load, pour qu'ils soient structur\'e9s exactement comme dans span dict. donc, "settings" est \'e9gale \'e0 "span::settings". J'avais dit de mettre "settings::file" et "settings::default", mais c'est compliqu\'e9 \'e0 copier et r\'e9utiliser. \'c7a veux dire qu'il faut des keys dans span.laod "settingsfile", "preferencesfile" et "projectfile" si on veux ouvrir d'autres fichiers. Ceci dit, avec la fonction "redirect" que j'ai impl\'e9ment\'e9, chacun pourrait avoir son span.load perso, et ne pas forec\'e9ment ouvrir d'autres fichiers...\
\
\
--------------------------------------------------\
21 sept 2012\
\
\
added "strip off .json to projectfile patch\
\
changed "getall" to get_projectstructure and modified/optimized\
\
changed loadproperties.js to properties.js because no longer has loadbang.\
\
\
--------------------------------------------------\
22 sept 2012\
\
fixed bug with not printing span status on initial load\
\
added projectstructure::events to span-base dict\
\
added span/print to preferences subpatch for span load done and for creating preferences file.\
\
added span/load/working 0 to preferences subpatch\
\
working on tm.span insertion into the load process...\
\
---\
working on span loading sequence. when preferences done loading or writing, bang goes to project file patch. if preferences::loadinsert it 1, span/insert/load is sent 1 to load insert environment (such as tapemovoe). when that is done loading it comes back and checks for autoload to see if it must autoload project. The insert load has to run before opening project because the insert load might change project contents.\
\
\
installed aumatic /span/insert/load system to be able to create tm.span before loading project. STILL IN PROGRESS\
\
--------------------------------------------------\
23 sept 2012\
\
continued working on tapemovie integration\
\
now ready to get into tapemovie namespace\
\
slightly re-organized span patch\
\
\
---\
working on module config editor for tapemovie\
\
\
--------------------------------------------------\
24 sept 2012\
\
finished 1st version of namespace quantity editor\
see in tom-dev\
tapemovie2-prealpha-test2.maxpat\
\
--------------------------------------------------\
26 sept 2012\
\
re-working project creation with new "specific key val" technique\
\
fixed datetimestamp sub patch to use span.requests and not erase appname and version\
\
\
--------------------------------------------------\
27 sept 2012\
\
pretty much finished project creation\
\
--------------------------------------------------\
28 sept 2012\
\
working on project loading\
\
before opeing a project, need to empty keys that will definitely be replace with project keys. These are everything EXCEPT system, preferences and projectinfo. These are the "hardkeys" that should not be overwritten with opening a project.\
\
Adding "hardkeys" key to system so that this info is configurable by editing span-base dict.\
\
There should also be "softkeys" that are the keys that will be added empty to the list of hardkeys. This will enable us to easily reset or initialize span dict without completely regenerating it from the beginning.\
	1) delete all keys that are not "hardkeys"\
	2) create empty soft keys\
\
When we read a project, the span keys are initialized as above, then the project is merged, creating any keys that don't exist in the basic span dict. In this way (with the help of "softkeys") the span key list will be cleaned up with every project reading.\
\
added "remove" function to span requests\
\
added "lastsaved" to project info\
\
re-added project name key. this will make it easier to use name later.\
\
---\
finished project loading basic patches\
\
need to update tapemovie nodes merge and namespace create\
\
added "hardkeys" and "softkeys"\
\
added "remove" function to span requests\
\
added "lastsaved" to project info\
\
re-added project name key. this will make it easier to use name later.\
\
--------------------------------------------------\
29 sept 2012\
\
working on span and tapemovie creation to better integrate\
\
change order of creation to put insert afer base creation, but before preferences.\
\
tapemovie creation within insert JUST merges base and basic info.\
\
\
--------------------------------------------------\
30 sept 2012\
\
created new dict.dump patch in clippings\
	this allows us to do a merge more effectively\
\
added "replace" function to span.requests\
\
removed dict.setcreate from clippings because not needed. "replace" message to dict creates hierachy if necessary. duh.\
\
--------------------------------------------------\
3 oct 2012\
\
\
fixed furst load printing bug error because first /span/print checked span dict before span dict existed. fixed by changing /span/print to /span/forceprint\
\
working on span request param functions (setparam, getparam, sendparam)\
	changes / to :: and vice versa, also assumes "namespace"\
\
Create span.request functions setparam, getparam, sendparam and setsendparam.\
\
\
working on new makeparam (spanparam)\
\
--------------------------------------------------\
4 oct 2012\
\
still working on new makeparam (spanparam)\
\
\
--------------------------------------------------\
5 oct 2012\
\
still working on new makeparam (spanparam)\
\
finished new linecurv that uses same curves as mappers (i.e. norm, sym and updwn - with arguments)\
\
--------------------------------------------------\
6 oct 2012\
\
still working on new makeparam (spanparam)\
\
\
--------------------------------------------------\
10 oct 2012\
\
worked on span.param\
finished first version, but still a problem with signals - will debug...\
\
--------------------------------------------------\
11 oct 2012\
\
incorporating span.param into tapemovie's "del"\
\
\
--------------------------------------------------\
13 oct 2012\
\
incorporating span.param into tapemovie's "del"\
\
\
--------------------------------------------------\
14 oct 2012\
\
finished incorporating span.param into tapemovie's "del". \
Clarified "module" implementation with tape clipping called t_header11 for module header with 1 in and 1 out.\
\
added spat/8 from tapemovie to tapemovie2\
modified proc-randtransf and proc-randtransf0\
\
added rvbap to externals\
\
\
--------------------------------------------------\
14 oct 2012\
\
changed /span/preferences/save to /span/preferences/write\
\
\
--------------------------------------------------\
17 oct 2012\
\
working on tm editors for del and filt\
new /tm/temp/store and /tm/temp/recall patch in tm\
\
made simple tm_builders patch for building nodes and editors\
\
-\
\
finished bkgndp implementation, including temps-store which is now in main tapemovie patch.\
\
fixed bug whereby system::projectstructure was merged with span and did not competely overwrite the original system::projectstructure like it should.\
\
span:\
added simple event/create, event/play and event/edit.\
\
finished checkitem in bkgndp menu\
\
added /tm/init !\
\
--------------------------------------------------\
18 oct 2012\
\
new tm_mouse and tm_mouse.edit\
\
minor debugging of new tm functions\
-\
\
worked on /span/events and implemented /span/events/saveedited\
\
-\
worked on temp-store \
\
include tm/temp/open in temp-store patch and not in bkgndp, and make store into text object. Editing this text will have no effect, as before.\
\
fixed bug in temp-open because of "mode" message changing mode of zl slice. Fixed by making new clipping object "slice1" which uses unjoin.\
\
--------------------------------------------------\
19 oct 2012\
\
worked on /span/event/create with new /span/event/type that includes methods for:\
all, allactive, tags (+list of tags), tagsactive (+list of tags), allexcept (+list of exceptions), allactiveexcept (+list of exceptions)\
\
--------------------------------------------------\
20 oct 2012\
\
almost done with /span/events first version. still some bugs, and some features to add\
\
--------------------------------------------------\
21 oct 2012\
\
debugged event creator and editor so that messages with "bang" function. Added new span object dict.dump\
\
--------------------------------------------------\
28-29 oct 2012\
\
reworked span/event/create to use new better syntax. no more /type. The way the create happens depends on messages and arguments after create name. See github issues.\
\
\
issue #46\
\
I had previously made an attempt at making an span/events patch, but ffter meeting with Renaud last week, I wanted to change it. I now have a new working version that is not complete, but I think it is in the right direction.\
\
How it works:\
\
----------------------------------------------------------------------------------------------------\
/span/event/create\
\
The basic /span/event writes all parameter values of the namespace, that is all "values" for "class=parameter", to the events key of span. The hierarchy of the event key is as follows:\
\
 The first level of keys of any event is a number which is a TIMESTAMP. This way it is possible to have several actions with the same parameter in an event separated by time. It will also allow future optimizations of data such as "only what is different" and so forth.\
\
An event is saved by default to time 0.\
\
The next level is, in order of storing and therefore of sending, the name of each node (del, filt, etc). The next level is the instance number for each node. The next level is the parameter name and its value.\
\
----------\
/span/event/create basic messages\
\
/span/event/create bang\
This creates a full event containing all parameters at timestamp 0 of event "temp"\
\
/span/event/create eventname\
This creates a full event containing all parameters at timestamp 0 of event "eventname"\
\
/span/event/create eventname timeinmillisecondes\
This creates a full event containing all parameters at timestamp "timeinmillisecondes of event "eventname"\
   ex. /span/event/create testevent 100\
      creates or modifies event testevent at timestamp 100 ms\
\
\
----------\
/span/event/create advanced messages\
\
you can add the following messages with arguments after the name and or timestamp:\
tags, only, except, ifvalue. They can be combined in any order.\
\
\
-tags-\
/span/event/create eventname tags audio\
This creates an event containing only parameters nodes with tags "audio"\
\
/span/event/create eventname tags audio control\
This creates an event containing only parameters nodes with tags "audio" and "control"\
\
\
-only-\
/span/event/create eventname only filt\
This creates an event containing only parameters of nodes containing "filt" in their name\
   (only filt parameters, but of all instances)\
\
/span/event/create eventname only vol\
This creates an event containing only parameters of nodes containing "vol" in their name\
   (i.e. only volumes of all nodes)\
\
/span/event/create eventname only filt/1\
This creates an event containing only parameters of nodes containing "filt/1" in their name\
   (only filt/1 parameters)\
\
/span/event/create eventname only filt/*/vol\
This creates an event containing only vol parameters of nodes "filt"\
   (the instance is a wildcard. only filt/vol parameters, but of all instances)\
\
/span/event/create eventname only filt del\
This creates an event containing only parameters of nodes containing "filt" or "del" in their name\
   (only filt and del parameters, but of all instances)\
\
\
-except-\
/span/event/create eventname except sw\
This creates an event containing all parameters except those containing "sw" in the name.\
   (i.e. all params except /sw)\
\
/span/event/create eventname except filt\
This creates an event containing all parameters except those containing "filt" in the name.\
   (i.e. all params of all nodes except "filt")\
\
/span/event/create eventname except rand\
This creates an event containing all parameters except those containing "rand" in the name.\
   (i.e. all params of all nodes except those that contain "rand" in their name)\
\
/span/event/create eventname except sw rev/1\
This creates an event containing all parameters except those containing "sw" in the name or those having to do with rev/1.\
\
\
-ifvalue-\
This saves all parameters of a node if a particular param of that node is set to a particular value.\
\
/span/event/create eventname ifvalue sw=1\
This is the famous "active" save from tapemovie. It saves all nodes which contain a sw param set to 1.\
\
This can be combined with all other messages in any order:\
/span/event/create eventname ifvalue sw=1 except mtrx dac subb rev/1 tags audio\
This saves all active nodes (modules) with tags audio, but NOT those that contain mtrx, dac, subb or rev/1\
\
\
\
----------------------------------------------------------------------------------------------------\
/span/event/play\
\
send a bang to play "temp" or an eventname to play that event. Event is executed timestamp by timestamp.\
As of the time of this entry, the event/play can only play one event at a time. This will be easy to fix with a poly~...\
\
\
----------------------------------------------------------------------------------------------------\
/span/event/edit\
\
send a bang to edit "temp" or an eventname to edit that event. \
\
Before editing, the event is converted to "good-old qlist" format in a text object. All params are listed as "/node/instance/param value", line by line. Timestamps are converted to relative time. One can edit as one likes, and all will be converted back to the span dict format for saving. If the converted sees that the same parameter is listed twice within the same timestamp, it should automatically insert 1 ms before the repeated param. This doesn't happen yet, but it will soon.\
\
\
----------------------------------------------------------------------------------------------------\
/span/event/saveedited\
\
send a bang to save the current edit. If the text window is still open it will be closed automatically and then saved back to span. The project will automatically be resaved.\
\
\
----------------------------------------------------------------------------------------------------\
/span/event/delete\
\
send an event name to delete that event. If it is "temp", the temp event will just be emptied and not completely deleted so that "temp" will not lose its place as the first event.\
\
\
\
\
----------------------------------------------------------------------------------------------------\
future events module in tapemovie\
\
There will be an events module (/events/1) very similar to the one in tapemovie. it will format its messages for the span/events patch and not do the work itself.\
\
\
--------------------------------------------------\
29 oct 2012 (later)\
\
/span/events/play is now polyphonic (10 voices)\
\
--------------------------------------------------\
30 oct 2012\
\
todo: \
	wait times less than 1 changed to 1 - 
\b done
\b0 \
	events subfolders\
	auto 1 ms when more than one time same message\
	comments (auto numbered?) - 
\b done
\b0 \
	/span/events/rename\
	timestamp line in events edit\
	events.edit patch	\
	import events folder\
	import events from another project (new format)\
\
added preferences::dynamicvars $1\
to span and tapemovie preferences to be able to globally turn on and off dynamic vars in editors (vars that display param_ and not param\
\
debugging\
\
tosymbol before writing comments to event - done\
\
\
summary:\
worked on events. \
added numbered comments. \
protected wait times less than 1. \
added preferences::dynamicvars value to span and tapemovie preferences to be able to globally turn on and off dynamic vars in editors (vars that display param_ and not param. \
did some debugging.\
\
\
--------------------------------------------------\
31 oct 2012\
\
made a temporary /tm/build that combines nodes and editors and prints progress correctly to the max window.\
\
\
--------------------------------------------------\
1 nov 2012\
\
worked on events. made initial version of sub folder capability. "normally" there is no limit to sub "folder" nesting.  Int event names are not allowed as that is how timestamp keys of an event are differentiated from "subfolder" events.\
\
\
--------------------------------------------------\
20 feb 2013\
\
getting head back in this thing...\
\
started working on matrix~\
	build, then work on editor, then work on symbolic linker.\
\
\
--------------------------------------------------\
9 july 2013\
\
Span sprint\
	tom et renaud\
\
Laptop - free space\
\
---\
priorities: \
	events\
		protect against same param twice in same time stamp\
	mappers\
		osc mapper\
		midi mapper\
\
	tape\
		matrix\
\
done:\
	span.events subfolder menu\
	\
	\
---\
make events all be on first level of events key, but use tags to group them. when importing old events, write folder name as tag.\
\
\
--------------------------------------------------\
10 july 2013\
\
events\
	changed /span/event/ to /span/events/\
\
	rebuild event editor to implement same-level events with tags\
\
--------------------------------------------------\
11 july 2013\
\
added span requests fuction "empty"\
\
	span.requests : empty nodes\
		puts empty dict at key nodes\
\
/span/events/tags\
	if no tag specified, creates tag "none"\
\
added contains message to span requests\
	outputs 1 or 0 from span.requests left outlet\
\
modify events structure so that all timestamp data is in ::data\
\
commas:\
	can't figure out any way to regexp commas coming from text, so must use "then" instead of comma in an event.\
	for importing old events, must replace commas with "then".\
\
basic functions seem to be working with ::data subkey.\
\
\
--------------------------------------------------\
12 july 2013\
\
fixed bug with dynamic parameters\
\
editors seem to be working correctly again.\
\
event editor correctly initializes at startup.\
\
todo:\
	event names with spaces\
	include tags in event edit window\
	include description key in event, and in editor window\
	1ms time stamp diff when same param\
\
\
}