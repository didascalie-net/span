{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13480\viewh16600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 span notes\
\
--------------------------------------------------\
23 april 2012\
\
\
how to get app path, patch path and span path\
	when in max\
	when in standalone\
\
\
how to get span folder\
\
	max\
		get span.core path with loadproperties.js from within span.core\
			remove /lib/span.core.maxpat\
\
	standalone\
		get app name with loadproperties.js on top level patch\
		get app path with "max sendapppath"\
		build span folder path with \
			apppath/appname.app/Contents/support/span\
\
\
---\
what to do at load:\
\
- get system info and location of span folder\
	clear span dict\
	copy system info to span dict\
	get list of files in span folder\
		copy to span dict as "spanfiles"\
- load span_info and print to max window\
	copy to span dict\
	\
\
\
\
\
\
---\
\
settings, preferences, etc...\
\
What's in the preferences\
What's in the settings\
What's in a project\
\
\
\
preferences:\
there should be user preferences stored in span folder or in project folder\
there should be a default preferences in the span folder that is used to generate a new user preferences\
\
	content\
		verbose\
		recentprojects (number of recent projects)\
		projects\
			current (only last created or loaded project)\
			recent (all recent projects = recentprojects)\
		shortcuts\
		scheduler\
		interface\
			colors\
				nodes\
					audio\
					device\
					video\
					control\
				themes\
					lightgreen\
					generic\
					purple\
					blue\
					red\
\
\
make span_defaultproject.json\
\
\
When you save a project, you could check which "keys" to save with the preferences key of it (i.e. shortcuts, scheduler).\
\
\
\
projects:\
\
	content\
		projectinfo\
			name\
			creation\
				date\
				appversion\
		config\
		paths\
		files\
		windows\
\
	maybe:	\
		scheduler\
		shortcuts\
\
\
---\
questions, thoughts\
\
should modules path be in preferences or project?\
\
need to load modules jsons into files key of modules dict.\
\
\
\
--------------------------------------------------\
24 april 2012\
\
-done- try namespace with /modulename/instance/param instead of /modulename.instance/param\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li1160\fi-1160\ql\qnatural\pardirnatural
\cf0 	this is really the way it should be. This makes the namespace much easier to look at because all of the instances of a module can be collapsed under the module name. Also, all of the common keys of a module can be written only once at the level of the module. We can also write the "quantity" key a the module level. In this way we can easily know how many instances there are by questioning the namspace.\
\
	i.e:\
	del\
		quantity: 2\
		active: 1\
		address: del\
		tags: audio\
		inputs: 1\
		outputs: 1\
		filename: t_del\
		description: "standard delay"\
		1\
			sw\
				address: sw\
				description: "on/off switch"\
				...\
				value: 0\
			...\
		2\
				address: sw\
				description: "on/off switch"\
				...\
				value: 0\
			...\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 		...\
\
\
-done- modify span-requests to send "null" whenever there is no response, then route to bang out right outlet if "null".\
\
-done- when adding modules to database, it not only adds modules to path key, but adds a relative path to each json in the modules key...\
\
	this way you can know exactly where the files are for a particular module, if you need to\
\
\
Try saving a project:\
	decide wht keys to save with it.\
\
What's the difference between preferences and a project?\
\
make new span_preferences file be written automatically if there is no existing, by opening and resaving span_defaultpreferences\
\
\
---\
working on projects\
\
What's in span\
\
	system\
	info\
	preferences\
		verbose\
		recentprojects\
		projects\
			current\
			recent\
		shortcuts\
		scheduler\
		interface\
	paths\
	modules\
	config\
	namespace\
\
what should be in projects:\
\
projects:\
\
	projectinfo\
		name\
		creation\
			date\
			appversion\
	projectprefs\
		scheduler\
			active 0\
		shortcuts\
			active 0\
	config\
		module\
			quantity\
			attribute overrides\
	paths\
		modules\
			tag: modules\
		soundfiles\
			tag: audio, soundfiles\
		samples\
			tag: audio, samples\
	files\
		name\
		\
	windows\
\
	maybe:	\
\
\
\
certain prefs can be in project, called projectprefs, and they are either copied into span prefs or ignored.\
	flag: active\
\
\
\
---\
There could be a templates folder, a modules folder and a defaultproject folder in the span folder. These would be saved in the new "system" key of span dict. If one wanted to, they could define other templates, modules or defaultproject folders in the "paths" section. When needed, span would first look to see if there is a path (project), and if not, would go to the system path for the default.\
}